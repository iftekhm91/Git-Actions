san_json=$(echo $san_json | jq --arg san "$san" '. += [{"TypeName": "2", "Name": $san}]')


# Ensure SAN_LIST is not empty
  if [ -n "san-ref-1.opstcontstore01.aws.test.au.internal.cba,opst-san-ref-2-aws.test.au.internal.cba,san-ref-3.example.com" ]; then
    echo "SAN_LIST is provided: $({ inputs.san_list }}"
    
    # Clean and format the SAN_LIST into a JSON array
    san_json="[]"
    IFS=',' read -r -a san_array <<< "san-ref-1.opstcontstore01.aws.test.au.internal.cba,opst-san-ref-2-aws.test.au.internal.cba,san-ref-3.example.com"
  
    # Loop through the SAN list and format them as API-compatible JSON objects
    for san in "${san_array[@]}"; do
      san_json=$(echo $san_json | jq '. += [{"TypeName": "2", "Name": "'"$san"'"}]')
    done
  
    # Set the SAN_JSON as an environment variable for later use
    echo "SAN_JSON=${san_json}" >> $GITHUB_ENV
    echo "Formatted SAN JSON: ${san_json}"
  else
    echo "SAN_LIST is not provided, skipping SAN formatting."
    echo "SAN_JSON=null" >> $GITHUB_ENV
  fi
  shell: /usr/bin/bash -e {0}
  env:
    AWS_DEFAULT_REGION: ap-southeast-2
    AWS_REGION: ap-southeast-2
    AWS_ACCESS_KEY_ID: ***
    AWS_SECRET_ACCESS_KEY: ***
    AWS_SESSION_TOKEN: ***
    GROUP_IDP_PRIVATE_KEY: ***
    CERT_PASSWORD: ***
    SECRETS_LIST_CLEAN_UP: ["GROUP_IDP_PRIVATE_KEY","CERT_PASSWORD"]
    isProd: false
/home/runner/_work/_temp/51fb2231-9190-427a-bb61-857c1b5910d1.sh: line 19: unexpected EOF while looking for matching `"'




Run # Ensure SAN_LIST is not empty
/home/runner/_work/_temp/ae1486ff-0ec3-4de5-8194-61b9a880cb92.sh: line 3: SAN_LIST is provided: ${inputs.san_list}: bad substitution
Error: Process completed with exit code 1.

jobs:
  cert-mgmt-job:
    runs-on: ${{ inputs.job_runner }}
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Format SAN_LIST into JSON (if SAN_LIST is provided)
        id: format-san-list
        run: |
          # Ensure SAN_LIST is not empty
          if [ -n "${{ inputs.san_list }}" ]; then
            echo "SAN_LIST is provided: ${inputs.san_list}"
            
            # Clean and format the SAN_LIST into a JSON array
            san_json="[]"
            IFS=',' read -r -a san_array <<< "${{ inputs.san_list }}"

            # Loop through the SAN list and format them as API-compatible JSON objects
            for san in "${san_array[@]}"; do
              san_json=$(echo $san_json | jq '. += [{"TypeName": "2", "Name": "'"$san"'"}]')
            done

            # Set the SAN_JSON as an environment variable for later use
            echo "SAN_JSON=${san_json}" >> $GITHUB_ENV
            echo "Formatted SAN JSON: ${san_json}"
          else
            echo "SAN_LIST is not provided, skipping SAN formatting."
            echo "SAN_JSON=null" >> $GITHUB_ENV
          fi

      - name: Issue/Manage cert ${{ inputs.cert_name }} using Cert Management API
        uses: CBA-General/cert-mgmt-api-gh-action@v3.2.0
        id: managecert
        with:
          clientid: ${{ inputs.group_idp_client_id }}
          privatekey: ${{ env.GROUP_IDP_PRIVATE_KEY }}
          command: ${{ inputs.cert_action }} 
          data: '{"subject":"${{ inputs.cert_name }}", "includechain":"true", "cadn": "sha2-g3", "includeprivatekey": "true", "password":"${{ env.CERT_PASSWORD }}", "SAN": '${{ env.SAN_JSON }}'}'
          download: true
          encode: false
          prod: ${{ env.isProd }}




Run if [ -n "san-ref-1.opstcontstore01.aws.test.au.internal.cba,opst-san-ref-2-aws.test.au.internal.cba,san-ref-3.example.com" ]; then
Formatted SAN JSON: [
  {
    "TypeName": "2",
    "Name": "san-ref-1.opstcontstore01.aws.test.au.internal.cba"
  },
  {
    "TypeName": "2",
    "Name": "opst-san-ref-2-aws.test.au.internal.cba"
  },
  {
    "TypeName": "2",
    "Name": "san-ref-3.example.com"
  }
]
Error: Unable to process file command 'env' successfully.
Error: Invalid format '  {'



curl -i -X POST \
  https://prod01.certmgmt.prod.aws.groupapi.cba/cert/v1/issue \
  -H 'Authorization: Bearer <YOUR_TOKEN_HERE>' \
  -H 'Content-Type: application/json' \
  -H 'x-request-id: string' \
  -d '{
    "subject": "string",
    "tsosn": 0,
    "cadn": "sha2",
    "csr": "",
    "format": "Base64",
    "includeprivatekey": false,
    "password": "",
    "includechain": "True",
    "san": [],
    "keystorepassword": "",
    "friendlyname": "",
    "organizationalunit": "",
    "expiresin": 60
  }'

san
Array of San (objects) or San (null)
(San)
The Subject Alternative Name (SAN) is an extension to the X.509 specification that allows users to specify additional host names for a single SSL certificate. The default value is an empty list. If you want to add SANs to the certificate, you can add them in the following format: [{"TypeName":"2","Name":"example.com"}]. Type or TypeName: A number that represents the kind of SAN: 0: OtherName. Specify a Uniform Resource Name (URN) or username. 1: Email 2: DNS 6: URI 7: IPAddress

Default
[]
  
total 12
drwxr-xr-x. 13 runner runner  219 Jan  8 00:12 .
drwxr-xr-x.  3 runner runner   29 Jan  8 00:12 ..
drwxr-xr-x.  8 runner runner  200 Jan  8 00:12 .git
drwxr-xr-x.  3 runner runner   70 Jan  8 00:12 .github
-rw-r--r--.  1 runner runner  613 Jan  8 00:12 .gitignore
-rw-r--r--.  1 runner runner 3850 Jan  8 00:12 README.md
drwxr-xr-x.  2 runner runner   66 Jan  8 00:12 budgets
drwxr-xr-x.  2 runner runner  224 Jan  8 00:12 efs-backups
drwxr-xr-x.  4 runner runner   41 Jan  8 00:12 infrastructure
drwxr-xr-x.  3 runner runner   24 Jan  8 00:12 observability
drwxr-xr-x.  2 runner runner   44 Jan  8 00:12 prerequisites
drwxr-xr-x.  2 runner runner   67 Jan  8 00:12 scripts
drwxr-xr-x.  2 runner runner 4096 Jan  8 00:12 secrets
drwxr-xr-x.  2 runner runner  116 Jan  8 00:12 sns
drwxr-xr-x.  2 runner runner   27 Jan  8 00:12 snyk
Could not open file or uri for loading private key from /home/runner/_work/rrcs-dctm-infra/rrcs-dctm-infra/test-sha-2-dctm-internal-dev.opstcontstore01.aws.test.au.internal.cba.key
80BB96CE317F0000:error:16000069:STORE routines:ossl_store_get0_loader_int:unregistered scheme:../crypto/store/store_register.c:237:scheme=file
80BB96CE317F0000:error:80000002:system library:file_open:No such file or directory:../providers/implementations/storemgmt/file_store.c:267:calling stat(/home/runner/_work/rrcs-dctm-infra/rrcs-dctm-infra/test-sha-2-dctm-internal-dev.opstcontstore01.aws.test.au.internal.cba.key)
cat: /home/runner/_work/rrcs-dctm-infra/rrcs-dctm-infra/decryptkey.pem: No such file or directory
######################################### Secret Does not Exists #########################################

Parameter validation failed:
Invalid length for parameter SecretString, value: 0, valid min length: 1
cat: /home/runner/_work/rrcs-dctm-infra/rrcs-dctm-infra/test-sha-2-dctm-internal-dev.opstcontstore01.aws.test.au.internal.cba.crt: No such file or directory
cat: /home/runner/_work/rrcs-dctm-infra/rrcs-dctm-infra/test-sha-2-dctm-internal-dev.opstcontstore01.aws.test.au.internal.cba-chain.pem: No such file or directory
######################################### Secret Does not Exists #########################################

Parameter validation failed:
Invalid length for parameter SecretString, value: 0, valid min length: 1
0s
Run # Set the directory
####################### decryptkey.pem file does not exist #######################
####################### test-sha-2-dctm-internal-dev.opstcontstore01.aws.test.au.internal.cba-chain.pem file does not exist #######################
####################### test-sha-2-dctm-internal-dev.opstcontstore01.aws.test.au.internal.cba.crt file does not exist #######################
####################### test-sha-2-dctm-internal-dev.opstcontstore01.aws.test.au.internal.cba.key file does not exist #######################
