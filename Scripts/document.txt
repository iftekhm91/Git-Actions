This document provides detailed documentation for the newly designed GitHub CI/CD solution intended for creating AWS resources. The solution employs GitHub Actions to automate the deployment of AWS infrastructure using CloudFormation templates.

Table of Contents

Overview

Initial Setup

Permissions

Environment Variables

Directory Structure

Scripts

Common Functions (common.sh)

Create Changeset Script (create-changeset.sh)

Deploy Script (deploy.sh)

GitHub Actions Workflow

Overview

This solution automates the deployment of AWS resources using GitHub Actions to streamline the process of creating, updating, and managing CloudFormation stacks. The CI/CD pipeline is structured to support multiple environments (npd, nft, prd) and utilizes OIDC for secure role assumption.

Initial Setup

Permissions

Two IAM roles are required for this solution:

GithubCICD: This role is primarily responsible for executing the deployment of AWS resources defined in the CloudFormation templates. It allows the GitHub Actions workflow to create, update, and delete resources in the specified AWS accounts based on the defined parameters.

GithubOIDC: This role establishes an OIDC (OpenID Connect) relationship between the GitHub repository and the AWS landing zone. This relationship enables GitHub to authenticate and authorize actions performed by the GitHub Actions runner.

Environment Variables

The following environment variables must be set for the workflow to function correctly:

AWS_ACCOUNT_ID_NPD

AWS_ACCOUNT_ID_NFT

AWS_ACCOUNT_ID_PRD

AWS_DEPLOY_ROLE_COMMON

AWS_TRUST_ROLE_COMMON

AWS_REGION_COMMON

These variables map specific AWS accounts and roles to the environments defined in the workflow.

Directory Structure

The following directory structure is implemented:

.github/
└── workflows/
    ├── infra-deployment.yml
    ├── snyk-scan.yml
    └── wiz-action.yml
infrastructure/
├── parameters/
│   ├── npd/
│   │   ├── efs.properties
│   │   ├── s3.properties
│   │   └── secrets.properties
│   ├── nft/
│   │   ├── efs.properties
│   │   ├── s3.properties
│   │   └── secrets.properties
│   └── prd/
│       ├── efs.properties
│       ├── s3.properties
│       └── secrets.properties
└── templates/
    ├── efs.yml
    ├── s3.yml
    └── secrets.yml
scripts/
├── common.sh
├── create-changeset.sh
└── deploy.sh


Scripts

Common Functions (common.sh)

The common.sh script serves as a foundational utility that defines common functions and environment variables used throughout the deployment process. Key components include:

Environment Variables: 

Sets default AWS region (AWS_REGION and AWS_DEFAULT_REGION) to "ap-southeast-2".

Defines the application name (APPLICATION_NAME) to prefix resource names in AWS.

Template References: 

References CloudFormation template files for S3, EFS, and Secrets Manager, facilitating easy deployment calls.

Common Functions:

create_update_change_set: Prepares a CloudFormation change set for resources without immediate execution, using parameters like stack name and template file.

deploy: Executes the deployment of the CloudFormation stack using the provided parameters.

Create Changeset Script (create-changeset.sh)

The create-changeset.sh script is responsible for creating a change set to preview AWS resource deployment. Key functionalities include:

Argument Parsing: 

Accepts command-line arguments for specifying the target environment (npd, nft, prd) and optional debug logging.

Change Set Creation Logic:

Based on the specified environment, the script creates change sets for each resource type (S3, EFS, Secrets Manager) using dedicated properties files for configuration.

Error Handling: 

Validates the presence of the required environment name, exiting with an error message if not provided.

Deploy Script (deploy.sh)

The deploy.sh script is tasked with deploying AWS resources defined in CloudFormation templates. Key features include:

Argument Parsing: 

Similar to create-changeset.sh, it accepts command-line arguments for the target environment and debug mode.

Resource Deployment Logic:

Calls deployment functions for each resource type based on the specified environment, creating or updating CloudFormation stacks as necessary.

Error Handling: 

Checks for the required environment name and exits with an error message if not present.

Completion Messages: 

Outputs success messages upon completing the deployment process, providing user feedback.

GitHub Actions Workflow

There is a separate Confluence dedicated to the workflow. Please look here for the detailed implementation or keep reading for a quick summary. 

The GitHub Actions workflow automates the process of managing AWS infrastructure changes through two main jobs: Create-Changeset and Deploy-Changeset.

Triggers: The workflow is triggered by pushes to the specified branches (npd, nft, prd).

Permissions: The workflow requires permissions for writing ID tokens and reading repository contents.

Create-Changeset Job:

Environment Setup: It checks out the repository and sets environment variables based on the branch name.

Assume Role: Assumes the necessary AWS role to gain access to resources.

Create Changeset: Executes a script (create-changeset.sh) to prepare a CloudFormation changeset for the specified environment, enabling a preview of the deployment without immediate execution.

Deploy-Changeset Job:

Dependencies: This job depends on the successful completion of the Create-Changeset job.

Changeset Approval: Includes a step for approval before proceeding.

Resource Deployment: Uses a script (deploy.sh) to deploy the changeset to AWS, creating or updating the necessary resources based on the CloudFormation templates.

This workflow effectively manages infrastructure deployments by allowing for dry runs (changesets) and controlled deployments, ensuring a streamlined CI/CD process. Ref workflow

This document serves as a comprehensive guide for implementing and utilizing the GitHub CI/CD solution for AWS resource deployment. Ensure that all necessary IAM roles, permissions, and environment variables are correctly configured before running the workflow.
